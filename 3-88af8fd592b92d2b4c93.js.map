{"version":3,"sources":["webpack:///../src/components/lazy-hydrate.tsx"],"names":["u","b","f","h","image","p","loading","j","isLoading","v","isLoaded","y","toggleIsLoaded","C","ref","L","imgClassName","N","imgStyle","E","k","objectPosition","w","backgroundColor","O","objectFit","P","S","e","F","width","x","height","I","layout","_","images","q","placeholder","D","current","J","querySelector","r","M","JSON","stringify","V","t","o","z","d","createElement","a","i","Object","assign","n","s","className","c","l","g"],"mappings":"+LAqB2B,SAEXA,IAedC,EACAC,GAAA,IAdEC,EAAAH,EAAAI,MACAC,EAAAL,EAAAM,QACAC,EAAAP,EAAAQ,UACAC,EAAAT,EAAAU,SACAC,EAAAX,EAAAY,eACAC,EAAAb,EAAAc,IACAC,EAAAf,EAAAgB,aAAAC,EAAAjB,EACAkB,SAAAC,OAAA,IAAAF,EAAW,GAAAA,EACXG,EAAApB,EAAAqB,eACAC,EAAAtB,EAAAuB,gBAAAC,EAAAxB,EACAyB,UAAAC,OAAA,IAAAF,EAAA,QAAAA,EACGG,EAAAC,YAAA5B,EAAA,4IAMH6B,EAME1B,EANF2B,MACAC,EAKE5B,EALF6B,OACAC,EAIE9B,EAJF+B,OACAC,EAGEhC,EAHFiC,OACAC,EAEElC,EAFFmC,YACiBC,EACfpC,EADFoB,gBAGF,IAAKtB,EAAKuC,QACR,OAAO,KAGT,IAAMC,EAAaxC,EAAKuC,QAAQE,cAAA,2BAEhC,GAAIC,eAA8BF,IAAevC,EAASsC,QACxD,OAAO,KAGT,IAAMI,EAAWC,KAAKC,UAAUX,GAC1BY,EAAYC,YAAeJ,GAEjCzB,EAAA8B,YAAA,CACExB,UAAAC,EACAL,eAAAD,EACAG,gBAAAD,GACGH,GAGL,IAAM+B,EACJC,IAAAC,cAACC,IAAA,CAAcnB,OAAQD,EAAQH,MAAOD,EAAOG,OAAQD,IACjDgB,GACAI,IAAAC,cAACE,IAAAC,OAAAC,OAAA,GACKC,YACFpB,EACA5B,EACAwB,EACAJ,EACAE,EACAQ,KAINY,IAAAC,cAACM,IAAAH,OAAAC,OAAA,GACM7B,EAAA,CACLG,MAAOD,EACPG,OAAQD,EACR4B,UAAW5C,GACP6C,YACFrD,EACAwC,GAAatC,EACb0B,EACA9B,EACAM,EACAiC,EACA/B,EACAM,MAWR,OAJiBjB,EAASsC,QAAoBqB,SAASC,WAC9CZ,EAAWjD,EAAKuC,SACzBtC,EAASsC,SAAA,EAAU,WAGbvC,EAAKuC,SACPqB,iBAAQ,KAAkC5D,EAAKuC","file":"3-88af8fd592b92d2b4c93.js","sourcesContent":["import React, { MutableRefObject } from \"react\"\nimport { hydrate, render } from \"react-dom\"\nimport { GatsbyImageProps } from \"./gatsby-image.browser\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImageProps, MainImage } from \"./main-image\"\nimport {\n  getMainProps,\n  getPlaceholderProps,\n  hasNativeLazyLoadSupport,\n  hasImageLoaded,\n} from \"./hooks\"\nimport { ReactElement } from \"react\"\n\ntype LazyHydrateProps = Omit<GatsbyImageProps, \"as\" | \"style\" | \"className\"> & {\n  isLoading: boolean\n  isLoaded: boolean // alwaystype SetStateAction<S> = S | ((prevState: S) => S);\n  toggleIsLoaded: (toggle: boolean) => void\n  ref: MutableRefObject<HTMLImageElement | undefined>\n}\n\nconst IS_DEV = process.env.NODE_ENV === `development`\n\nexport function lazyHydrate(\n  {\n    image,\n    loading,\n    isLoading,\n    isLoaded,\n    toggleIsLoaded,\n    ref,\n    imgClassName,\n    imgStyle = {},\n    objectPosition,\n    backgroundColor,\n    objectFit = `cover`,\n    ...props\n  }: LazyHydrateProps,\n  root: MutableRefObject<HTMLElement | undefined>,\n  hydrated: MutableRefObject<boolean>\n): (() => void) | null {\n  const {\n    width,\n    height,\n    layout,\n    images,\n    placeholder,\n    backgroundColor: wrapperBackgroundColor,\n  } = image\n\n  if (!root.current) {\n    return null\n  }\n\n  const hasSSRHtml = root.current.querySelector(`[data-gatsby-image-ssr]`)\n  // On first server hydration do nothing\n  if (hasNativeLazyLoadSupport() && hasSSRHtml && !hydrated.current) {\n    return null\n  }\n\n  const cacheKey = JSON.stringify(images)\n  const hasLoaded = hasImageLoaded(cacheKey)\n\n  imgStyle = {\n    objectFit,\n    objectPosition,\n    backgroundColor,\n    ...imgStyle,\n  }\n\n  const component = (\n    <LayoutWrapper layout={layout} width={width} height={height}>\n      {!hasLoaded && (\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            isLoaded,\n            layout,\n            width,\n            height,\n            wrapperBackgroundColor\n          )}\n        />\n      )}\n      <MainImage\n        {...(props as Omit<MainImageProps, \"images\" | \"fallback\">)}\n        width={width}\n        height={height}\n        className={imgClassName}\n        {...getMainProps(\n          isLoading,\n          hasLoaded || isLoaded,\n          images,\n          loading,\n          toggleIsLoaded,\n          cacheKey,\n          ref,\n          imgStyle\n        )}\n      />\n    </LayoutWrapper>\n  )\n\n  // Force render to mitigate \"Expected server HTML to contain a matching\" in develop\n  const doRender = hydrated.current || IS_DEV ? render : hydrate\n  doRender(component, root.current)\n  hydrated.current = true\n\n  return (): void => {\n    if (root.current) {\n      render((null as unknown) as ReactElement, root.current)\n    }\n  }\n}\n"],"sourceRoot":""}